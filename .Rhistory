for (j in 1:max(ages.nums)) {
assign(disp.to.be.added, paste0("data.disp",j))
celltype.disp[ages.levels[j]] <- disp.to.be.added
}
dispersion.list[[cell.types.levels[i]]] <- celltype.disp
}
assign(disp.to.be.added, paste0("data.disp",1))
assign(disp.to.be.added, paste0("data.disp",4))
assign(disp.to.be.added, 4)
assign(paste0(disp.to.be.added), paste0("data.disp",4))
assign(paste0(disp.to), paste0("data.disp",4))
assign(paste0(disp.to.be.added), 4)
paste0("data.disp",j)
get(paste0("data.disp",j))
is.empty(get(paste0("data.disp",j)))
is.null(get(paste0("data.disp",j)))
length(get(paste0("data.disp",j)))
celltype.disp <- data.frame('gene'= rownames(counts))
for (j in 1:max(ages.nums)) {
if (length(get(paste0("data.disp",j))) > 0) {
celltype.disp[ages.levels[j]] <- get(paste0("data.disp",j))
}
}
dispersion.list[[cell.types.levels[i]]] <- celltype.disp
View(dispersion.list)
dispersion.list
devtools::document()
gc()
estimate_dispersion(dataset.counts, dataset.saver$estimate, celltypes$celltype, ages$age, model = 'cCV', ncores = 4, cell.types.cutoff = 10)
gc()
rm(ages)
ages <- data.frame(index=dataset.age)
age_map <- data.frame(index=c(1:length(dataset.age.levels)),age = dataset.age.levels)
celltypes <- data.frame(index=dataset.celltype)
celltype_map <- data.frame(index=c(1:length(dataset.celltype.levels)),
celltype = dataset.celltype.levels)
ages <- join(ages, age_map)
celltypes <- join(celltypes, celltype_map)
estimate_dispersion(dataset.counts, dataset.saver$estimate, celltypes$celltype, ages$age,
model = 'cCV', ncores = 4, cell.types.cutoff = 10)
gc()
install.packages("styler")
devtools::document()
styler::style_pkg()
styler::style_pkg()
devtools::document()
load("./data/TMS_marrow.RData")
compute_manifold(dataset.counts, method = "neighbor")
devtools::document()
devtools::document()
styler::style_pkg()
usethis::use_mit_license()
usethis::use_version()
usethis::use_version()
devtools::check()
devtools::check()
pkgbuild::check_build_tools(debug = TRUE)
usethis::use_tidy_github_actions()
devtools::check()
library(Rtools)
devtools::load_all()
devtools::check()
devtools::load_all()
options(buildtools.check = function(action) TRUE )
The following package(s) are missing their DESCRIPTION files:
renv::status()
library(TabulaMurisSenisData)
tms_marrow <- TabulaMurisSenisDroplet(tissues = "Marrow")
tms_marrow_counts <- tms_marrow$Marrow@assays@data$counts
rownames(tms_marrow_counts) <- rownames(tms_marrow$Marrow)
colnames(tms_marrow_counts) <- colnames(tms_marrow$Marrow)
tms_marrow_counts <- as(tms_marrow_counts, "dgCMatrix")
tms_marrow_ages <- which(tms_marrow$Marrow$age %in% c("3m", "30m"))
tms_marrow_cell_types <- which(tms_marrow$Marrow$cell_ontology_class %in% c('erythroid progenitor', 'granulocytopoietic cell',
'hematopoietic precursor cell', 'megakaryocyte-erythroid progenitor cell', 'precursor B cell'))
tms_marrow_counts <- tms_marrow_counts[, intersect(tms_marrow_ages, tms_marrow_cell_types)]
View(tms_marrow_counts)
tms_marrow_manifold_neighbor <- compute_manifold(tms_marrow_counts, method = "neighbor")
renv::init()
library(TabulaMurisSenisData)
tms_marrow <- TabulaMurisSenisDroplet(tissues = "Marrow")
tms_marrow_counts <- tms_marrow$Marrow@assays@data$counts
rownames(tms_marrow_counts) <- rownames(tms_marrow$Marrow)
colnames(tms_marrow_counts) <- colnames(tms_marrow$Marrow)
tms_marrow_counts <- as(tms_marrow_counts, "dgCMatrix")
tms_marrow_ages <- which(tms_marrow$Marrow$age %in% c("3m", "30m"))
tms_marrow_cell_types <- which(tms_marrow$Marrow$cell_ontology_class %in% c('erythroid progenitor', 'granulocytopoietic cell',
'hematopoietic precursor cell', 'megakaryocyte-erythroid progenitor cell', 'precursor B cell'))
tms_marrow_counts <- tms_marrow_counts[, intersect(tms_marrow_ages, tms_marrow_cell_types)]
tms_marrow_manifold_neighbor <- compute_manifold(tms_marrow_counts, method = "neighbor")
devtools::document()
tms_marrow_manifold_neighbor <- compute_manifold(tms_marrow_counts, method = "neighbor")
devtools::document()
tms_marrow_manifold_neighbor <- compute_manifold(tms_marrow_counts, method = "neighbor")
tms_marrow$Marrow$cell_ontology_class
tms_marrow$Marrow$age[which(tms_marrow$Marrow$age %in% c("3m", "30m"))]
tms_marrow$Marrow$age[intersect(tms_marrow_ages, tms_marrow_cell_types)]
estimate_dispersion(tms_marrow_counts, tms_marrow_manifold_neighbor,
tms_marrow$Marrow$cell_ontology_class[intersect(tms_marrow_ages, tms_marrow_cell_types)],
tms_marrow$Marrow$age[intersect(tms_marrow_ages, tms_marrow_cell_types)],
model = "cCV", ncores = 4, cell.types.cutoff = 10)
devtools::document()
estimate_dispersion(tms_marrow_counts, tms_marrow_manifold_neighbor,
tms_marrow$Marrow$cell_ontology_class[intersect(tms_marrow_ages, tms_marrow_cell_types)],
tms_marrow$Marrow$age[intersect(tms_marrow_ages, tms_marrow_cell_types)],
model = "cCV", ncores = 4, cell.types.cutoff = 10)
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
save(tms_marrow, 'S:/Dropbox (Penn)/Aging/Intrinomap/data/tms_marrow.RData')
save(tms_marrow, file = 'S:/Dropbox (Penn)/Aging/Intrinomap/data/tms_marrow.RData')
devtools::check()
devtools::document()
devtools::check()
setwd("S:/Dropbox (Penn)/Aging/Intrinomap")
tools::resaveRdaFiles
save(tms_marrow, file = 'S:/Dropbox (Penn)/Aging/Intrinomap/data/tms_marrow.RData', compress='xz')
devtools::document()
tables(tms_marrow$Marrow$cell_ontology_class[intersect(tms_marrow_ages, tms_marrow_cell_types))
tables(tms_marrow$Marrow$cell_ontology_class[intersect(tms_marrow_ages, tms_marrow_cell_types)])
table(tms_marrow$Marrow$cell_ontology_class[intersect(tms_marrow_ages, tms_marrow_cell_types)])
save(tms_marrow, './data/tms_marrow.rda')
save(tms_marrow, file='./data/tms_marrow.rda', compress = 'xz')
file.create("R/data.R")
devtools::document()
data("tms_marrow")
tms_marrow_counts <- tms_marrow$Marrow@assays@data$counts
devtools::document()
devtools::document()
devtools::document()
devtools::document()
install.packages('TabulaMurisSenisData')
devtools::check()
devtools::check()
install.packages('TabulaMurisSenisData')
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
renv::status()
devtools::document()
library(devtools)
install.packages('devtools')
install.packages('devtools')
library(devtools)
devtools::document()
devtools::document()
renv::status()
renv::init()
renv::snapshot()
renv::init()
renv::update()
renv::snapshot()
devtools::document()
devtools::check()
devtools::build()
devtools::check()
devtools::check()
gc()
usethis::use_tidy_github_actions()
devtools::build_rmd()
devtools::build_rmd()
devtools::document()
devtools::build_rmd()
devtools::document()
usethis::use_pkgdown_github_pages()
pkgdown::build_site()
pkgdown::build_site()
styler::style_pkg()
# 安装 {styler}
install.packages("styler")
# 对整个包进行代码美化
styler::style_pkg()
Y
pkgdown::build_site()
renv::status()
renv::restore()
renv::update()
usethis::create_github_token()
usethis::edit_r_environ()
renv::update()
renv::update()
usethis::edit_r_environ()
pkgdown::build_site()
devtools::install()
pkgdown::build_site()
pkgdown::build_site()
styler::style_pkg()
devtools::document()
pkgdown::build_site()
styler::style_pkg()
pkgdown::build_site()
devtools::document()
renv::status()
devtools::install()
pkgdown::build_site()
gc()
pkgdown::build_site()
usethis::use_vignette("vignette_1_basic_workflow")
devtools::document()
devtools::build()
devtools::check()
renv::init()
renv::init()
renv::install()
devtools::build()
install.packages('devtools')
devtools::build()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
setwd("S:/Dropbox (Penn)/Aging/Scripts/TMS_marrow/Dispersion_20")
renv::status()
?renv::status()
renv::snapshot()
renv::status()
gc()
tms_marrow <- TabulaMurisSenisData::TabulaMurisSenisDroplet(tissues = "Marrow")
tms_marrow <- TabulaMurisSenisData::TabulaMurisSenisDroplet(tissues = "Marrow")
tms_marrow_counts <- tms_marrow$Marrow@assays@data$counts
rownames(tms_marrow_counts) <- rownames(tms_marrow$Marrow)
colnames(tms_marrow_counts) <- colnames(tms_marrow$Marrow)
tms_marrow_counts <- as(tms_marrow_counts, "dgCMatrix")
# Subset age groups and cell types
subset_ages <- which(tms_marrow$Marrow$age %in% c("3m", "30m"))
subset_cell_types <- which(tms_marrow$Marrow$cell_ontology_class %in% c(
"hematopoietic precursor cell", "megakaryocyte-erythroid progenitor cell",
"precursor B cell"
))
tms_marrow_counts <- tms_marrow_counts[, intersect(subset_ages, subset_cell_types)]
tms_marrow_manifold_neighbor <- compute_manifold(tms_marrow_counts, method = "neighbor")
library(INClock)
devtools::install_github("EddieYang1222/INClock")
renv::status()
renv::snapshot()
library(INClock)
tms_marrow_manifold_neighbor <- compute_manifold(tms_marrow_counts, method = "neighbor")
gc()
tms_marrow_cell_types <- tms_marrow$Marrow$cell_ontology_class[intersect(subset_ages, subset_cell_types)]
tms_marrow_ages <- tms_marrow$Marrow$age[intersect(subset_ages, subset_cell_types)]
tms_marrow_dispersions <- estimate_dispersion(tms_marrow_counts, tms_marrow_manifold_neighbor,
tms_marrow_cell_types, tms_marrow_ages,
model = "cCV", ncores = 2
)
gc()
library(INClock)
C(\omega)
tms_marrow <- TabulaMurisSenisData::TabulaMurisSenisDroplet(tissues = "Marrow")
tms_marrow_counts <- tms_marrow$Marrow@assays@data$counts
rownames(tms_marrow_counts) <- rownames(tms_marrow$Marrow)
colnames(tms_marrow_counts) <- colnames(tms_marrow$Marrow)
tms_marrow_counts <- as(tms_marrow_counts, "dgCMatrix")
# Subset age groups and cell types
subset_ages <- which(tms_marrow$Marrow$age %in% c("3m", "30m"))
subset_cell_types <- which(tms_marrow$Marrow$cell_ontology_class %in% c(
"hematopoietic precursor cell", "megakaryocyte-erythroid progenitor cell",
"precursor B cell"
))
tms_marrow_counts <- tms_marrow_counts[, intersect(subset_ages, subset_cell_types)]
tms_marrow_manifold_neighbor <- compute_manifold(tms_marrow_counts, method = "neighbor")
tms_marrow_cell_types <- tms_marrow$Marrow$cell_ontology_class[intersect(subset_ages, subset_cell_types)]
tms_marrow_ages <- tms_marrow$Marrow$age[intersect(subset_ages, subset_cell_types)]
# Estimate the dispersion parameters using constant CV
tms_marrow_dispersions <- estimate_dispersion(tms_marrow_counts, tms_marrow_manifold_neighbor,
tms_marrow_cell_types, tms_marrow_ages,
model = "cCV", ncores = 2
)
tms_marrow_dispersions[['hematopoietic precursor cell']]
summary(tms_marrow_dispersions[['hematopoietic precursor cell']]$3m)
summary(tms_marrow_dispersions[['hematopoietic precursor cell']]$3m)
summary(tms_marrow_dispersions[['hematopoietic precursor cell']])
summary(tms_marrow_dispersions[['precursor B cell']])
summary(tms_marrow_dispersions[['megakaryocyte-erythroid progenitor cell']])
names(tms_marrow_dispersions)
for (name in names(tms_marrow_dispersions)) {
summary(tms_marrow_dispersions[[name]])
}
names(tms_marrow_dispersions)[1]
summary(tms_marrow_dispersions[[names(tms_marrow_dispersions)[1]]])
for (i in names(tms_marrow_dispersions)) {
summary(tms_marrow_dispersions[[i]])
}
for (name in names(tms_marrow_dispersions)) {
print(summary(tms_marrow_dispersions[[name]]))
}
for (name in names(tms_marrow_dispersions)) {
print(paste0('Summary statistics for ', name))
print(summary(tms_marrow_dispersions[[name]]))
}
for (name in names(tms_marrow_dispersions)) {
message(paste0('Summary statistics for ', name))
print(summary(tms_marrow_dispersions[[name]]))
}
tms_marrow_dispersions[['precursor B cell']]
disp_df <- tms_marrow_dispersions[["precursor B cell"]]
ncol(disp_df)
seq(2, ncol(disp_df))
colnames(disp_df)[2]
nrow(disp_df)
disp_df[,2]
if (ncol(disp_df)>1) {
Age <- vector()
Dispersions <- vector()
for (i in seq(2, ncol(disp_df))) {
Age <- append(Age, rep(colnames(disp_df)[i], nrow(disp_df)))
Dispersions <- append(Dispersions, disp_df[,i])
}
}
temp <- data.frame(Age, Dispersions)
View(temp)
name
gsub(" ", "_", name)
table(tms_marrow_ages)
disp_df <- tms_marrow_dispersions[[name]]
if (ncol(disp_df)>2) {
Age <- vector()
Dispersions <- vector()
for (i in seq(3, ncol(disp_df))) {
Age <- append(Age, rep(colnames(disp_df)[i], nrow(disp_df)))
Dispersions <- append(Dispersions, log2(disp_df[,i]/disp_df[,2]))
}
}
temp <- data.frame(Age, Dispersions)
p <- ggplot(temp, aes(x=Age, y=Dispersions, fill=Age)) +
geom_hline(aes(yintercept = 0)) +
geom_violin(trim=TRUE) +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
scale_fill_brewer(palette="Blues") +
theme_minimal() +
ggtitle(paste0("TMS ",": ",name, " gene dispersions"))
library(ggplot2)
p <- ggplot(temp, aes(x=Age, y=Dispersions, fill=Age)) +
geom_hline(aes(yintercept = 0)) +
geom_violin(trim=TRUE) +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
scale_fill_brewer(palette="Blues") +
theme_minimal() +
ggtitle(paste0("TMS ",": ",name, " gene dispersions"))
p
disp_df <- tms_marrow_dispersions[[name]]
if (ncol(disp_df)>2) {
Age <- vector()
Dispersions <- vector()
for (i in seq(3, ncol(disp_df))) {
Age <- append(Age, rep(colnames(disp_df)[i], nrow(disp_df)))
Dispersions <- append(Dispersions, log2(disp_df[,2]/disp_df[,i]))
}
}
temp <- data.frame(Age, Dispersions)
p <- ggplot(temp, aes(x=Age, y=Dispersions, fill=Age)) +
geom_hline(aes(yintercept = 0)) +
geom_violin(trim=TRUE) +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
scale_fill_brewer(palette="Blues") +
theme_minimal() +
ggtitle(paste0("TMS ",": ",name, " gene dispersions"))
p
ggplot(temp, aes(x=Age, y=Dispersions, fill=Age)) +
geom_hline(aes(yintercept = 0)) +
geom_violin(trim=TRUE) +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
scale_fill_brewer(palette="Blues") +
theme_minimal() +
ggtitle(paste0("TMS ",": ",name, " gene dispersions relative to ", colnames(disp_df)[2]))
disp_df <- tms_marrow_dispersions[["hematopoietic precursor cell"]]
if (ncol(disp_df)>2) {
Age <- vector()
Dispersions <- vector()
for (i in seq(3, ncol(disp_df))) {
Age <- append(Age, rep(colnames(disp_df)[i], nrow(disp_df)))
Dispersions <- append(Dispersions, log2(disp_df[,2]/disp_df[,i]))
}
}
temp <- data.frame(Age, Dispersions)
# Create violin plots
p <- ggplot(temp, aes(x=Age, y=Dispersions, fill=Age)) +
geom_hline(aes(yintercept = 0)) +
geom_violin(trim=TRUE) +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
scale_fill_brewer(palette="Blues") +
theme_minimal() +
ggtitle(paste0("TMS ",": ",name, " gene level dispersions relative to ", colnames(disp_df)[2]))
p
disp_df <- tms_marrow_dispersions[["hematopoietic precursor cell"]]
if (ncol(disp_df)>1) {
Age <- vector()
Dispersions <- vector()
for (i in seq(2, ncol(disp_df))) {
Age <- append(Age, rep(colnames(disp_df)[i], nrow(disp_df)))
Dispersions <- append(Dispersions, 1/disp_df[,i])
}
}
temp <- data.frame(Age, Dispersions)
# Create violin plots
p <- ggplot(temp, aes(x=Age, y=Dispersions, fill=Age)) +
geom_hline(aes(yintercept = 0)) +
geom_violin(trim=TRUE) +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
scale_fill_brewer(palette="Blues") +
theme_minimal() +
ggtitle(paste0("TMS ",": ",name, " gene level dispersions"))
p
name <- 'hematopoietic precursor cell'
disp_df <- tms_marrow_dispersions[["hematopoietic precursor cell"]]
if (ncol(disp_df)>1) {
Age <- vector()
Dispersions <- vector()
for (i in seq(2, ncol(disp_df))) {
Age <- append(Age, rep(colnames(disp_df)[i], nrow(disp_df)))
Dispersions <- append(Dispersions, 1/disp_df[,i])
}
}
temp <- data.frame(Age, Dispersions)
# Create violin plots
p <- ggplot(temp, aes(x=Age, y=Dispersions, fill=Age)) +
geom_hline(aes(yintercept = 0)) +
geom_violin(trim=TRUE) +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
scale_fill_brewer(palette="Blues") +
theme_minimal() +
ggtitle(paste0("TMS ",": ",name, " gene level dispersions"))
p
disp_df <- tms_marrow_dispersions[[name]]
if (ncol(disp_df)>1) {
Age <- vector()
Dispersions <- vector()
for (i in seq(2, ncol(disp_df))) {
Age <- append(Age, rep(colnames(disp_df)[i], nrow(disp_df)))
Dispersions <- append(Dispersions, disp_df[,i])
}
Age <- factor(Age, levels = colnames(disp_df)[seq(2, ncol(disp_df))])
}
temp <- data.frame(Age, Dispersions)
# Create violin plots
p <- ggplot(temp, aes(x=Age, y=Dispersions, fill=Age)) +
geom_hline(aes(yintercept = 0)) +
geom_violin(trim=TRUE) +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
scale_fill_brewer(palette="Blues") +
theme_minimal() +
ggtitle(paste0("TMS ",": ",name, " gene level dispersions"))
p
disp_df <- tms_marrow_dispersions[[name]]
if (ncol(disp_df)>1) {
Age <- vector()
Dispersions <- vector()
for (i in seq(2, ncol(disp_df))) {
Age <- append(Age, rep(colnames(disp_df)[i], nrow(disp_df)))
Dispersions <- append(Dispersions, 1/disp_df[,i])
}
Age <- factor(Age, levels = colnames(disp_df)[seq(2, ncol(disp_df))])
}
temp <- data.frame(Age, Dispersions)
# Create violin plots
p <- ggplot(temp, aes(x=Age, y=Dispersions, fill=Age)) +
geom_hline(aes(yintercept = 0)) +
geom_violin(trim=TRUE) +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
scale_fill_brewer(palette="Blues") +
theme_minimal() +
ggtitle(paste0("TMS ",": ",name, " gene level dispersions"))
p
disp_df <- tms_marrow_dispersions[[name]]
if (ncol(disp_df)>2) {
Age <- vector()
Dispersions <- vector()
for (i in seq(3, ncol(disp_df))) {
Age <- append(Age, rep(colnames(disp_df)[i], nrow(disp_df)))
Dispersions <- append(Dispersions, log2(disp_df[,2]/disp_df[,i]))
}
Age <- factor(Age, levels = colnames(disp_df)[seq(3, ncol(disp_df))])
}
temp <- data.frame(Age, Dispersions)
# Create violin plots
p <- ggplot(temp, aes(x=Age, y=Dispersions, fill=Age)) +
geom_hline(aes(yintercept = 0)) +
geom_violin(trim=TRUE) +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
scale_fill_brewer(palette="Blues") +
theme_minimal() +
ggtitle(paste0("TMS ",": ",name, " gene level dispersions relative to ", colnames(disp_df)[2]))
p
gc()
renv::status()
renv::update()
pkgdown::build_site()
knitr::include_graphics("figures/dispersion_plot_example.png")
'C:/Users/yang1222.WHARTON/Dropbox%20(Penn)/Aging/INClock/vignettes/figures/dispersion_plot_example.png'
load('C:/Users/yang1222.WHARTON/Dropbox%20(Penn)/Aging/INClock/vignettes/figures/dispersion_plot_example.png')
load('C:/Users/yang1222.WHARTON/Dropbox (Penn)/Aging/INClock/vignettes/figures/dispersion_plot_example.png')
pkgdown::build_site()
pkgdown::build_site()
normalizePath("figures/log_fold_change_plot_example.png")
knitr::include_graphics(normalizePath("figures/log_fold_change_plot_example.png"))
pkgdown::build_site()
pkgdown::build_site()
renv::status()
renv::update()
