compute_manifold(dataset.counts, method='SAVER')
library(SAVER)
load('./data/TMS_marrow.RData')
compute_manifold(dataset.counts, method='SAVER')
usethis::use_package("SAVER")
devtools::install_github("mohuangx/SAVER")
devtools::install_github("mohuangx/SAVER")
load('./data/TMS_marrow.RData')
compute_manifold(dataset.counts, method='SAVER')
devtools::document()
compute_manifold(dataset.counts, method='SAVER')
library(SAVER)
compute_manifold(dataset.counts, method='SAVER')
gc()
devtools::install_github("mohuangx/SAVER")
devtools::document()
devtools::document()
gc()
gc()
install.packages('Matrix')
devtools::document()
R.Version()
R.Version()
R.version()
R.Version()
devtools::document()
library(devtools)
renv::init()
renv::status()
renv::init()
renv::status()
renv::init()
renv::init()
renv::status()
renv::snapshot()
renv::update()
renv::snapshot()
devtools::document()
load('./data/TMS_marrow.RData')
compute_manifold(dataset.counts, method='SAVER')
compute_manifold(dataset.counts, method='neighbor')
devtools::document()
devtools::document()
devtools::install_github("mohuangx/SAVER")
devtools::install_github("EddieYang1222/SAVER_D")
devtools::document()
compute_manifold(dataset.counts, method='SAVER')
compute_manifold(dataset.counts, method='neighbor')
compute_manifold(dataset.counts, method='neighbor')
devtools::document()
compute_manifold(dataset.counts, method='neighbor')
compute_manifold(dataset.counts, method='neighbor')
devtools::document()
compute_manifold(dataset.counts, method='neighbor')
devtools::document()
compute_manifold(dataset.counts, method='neighbor')
manifold_obj <- CreateSeuratObject(counts = dataset.counts)
manifold_obj <- NormalizeData(manifold_obj, normalization.method = "LogNormalize", scale.factor = 10000)
manifold_obj <- FindVariableFeatures(manifold_obj, selection.method = "vst", nfeatures = nfeatures)
manifold_obj <- NormalizeData(manifold_obj, normalization.method = "LogNormalize", scale.factor = 10000)
manifold_obj <- FindVariableFeatures(manifold_obj, selection.method = "vst", nfeatures = 3000)
manifold_obj <- ScaleData(manifold_obj, features = rownames(manifold_obj))
manifold_obj <- RunPCA(manifold_obj, features = VariableFeatures(object = manifold_obj))
manifold_obj <- FindNeighbors(manifold_obj, dims=1:20, k.param = 20, return.neighbor=TRUE)
# Calculate mean count for each cell
manifold_counts <- GetAssayData(object = manifold_obj, assay = "RNA", layer = "counts")
manifold <- Matrix::sparseMatrix(i = integer(0), j = integer(0),
dims = manifold_counts@Dim, dimnames = manifold_counts@Dimnames)
manifold <- as(manifold, "dMatrix")
manifold_neighbor_idx <- manifold_obj@neighbors$RNA.nn@nn.idx
for (j in 1:dim(manifold)[2]) {
# Extract the indices of the nearest neighbors
neighbor_idx <- manifold_neighbor_idx[j,]
neighbor_counts <- rowMeans(manifold_counts[,neighbor_idx]) # size factor
# Store the result in the data frame
manifold[,j] <- neighbor_counts
}
manifold_counts[,neighbor_idx]
rowMeans(manifold_counts[,neighbor_idx])
manifold_neighbor_idx
dim(manifold_counts[,neighbor_idx])
Matrix::rowMeans(manifold_counts[,neighbor_idx])
devtools::document()
dim(manifold)
gc()
rm(manifold)
rm(manifold_counts)
gc()
load('./data/TMS_marrow.RData')
compute_manifold(dataset.counts, method='neighbor')
gc()
gc()
file.create("R/estimate_dispersion.R")
gc()
match('NK cell', dataset.celltype)
match('NK cell', dataset.celltype.levels)
match('2', dataset.celltype)
match(2, dataset.celltype)
which(2 %in% dataset.celltype)
which(14 %in% dataset.celltype)
which(dataset.celltype %in% c(14))
c(which(dataset.celltype %in% c(14)))
dataset.counts[1,which(dataset.celltype %in% c(14))]
dataset.counts[,which(dataset.celltype %in% c(14))]
dim(dataset.counts[,which(dataset.celltype %in% c(14))])
load('./data/TMS_marrow_manifold.RData')
ages <- data.frame(index=dataset.age)
age_map <- data.frame(index=c(1:length(dataset.age.levels)),
age = dataset.age.levels)
celltypes <- data.frame(index=dataset.celltype)
celltype_map <- data.frame(index=c(1:length(dataset.celltype.levels)),
celltype = dataset.celltype.levels)
ages <- join(ages, age_map)
library(plyr)
ages <- data.frame(index=dataset.age)
age_map <- data.frame(index=c(1:length(dataset.age.levels)),
age = dataset.age.levels)
celltypes <- data.frame(index=dataset.celltype)
celltype_map <- data.frame(index=c(1:length(dataset.celltype.levels)),
celltype = dataset.celltype.levels)
ages <- join(ages, age_map)
celltypes <- join(celltypes, celltype_map)
devtools::document()
estimate_dispersion(dataset.counts, dataset.saver, celltypes$celltype, ages$age,
model = 'cCV', ncores = 4, cell.types.cutoff = 10)
gc()
devtools::document()
gc()
estimate_dispersion(dataset.counts, dataset.saver, celltypes$celltype, ages$age,
model = 'cCV', ncores = 4, cell.types.cutoff = 10)
cell.types.levels <- levels(cell.types)
size.factor <- colSums(dataset.counts) / mean(colSums(dataset.counts))
gc()
devtools::document()
pkgload::dev_help('estimate_dispersion')
estimate_dispersion(dataset.counts, dataset.saver$estimate, celltypes$celltype, ages$age, model = 'cCV', ncores = 4, cell.types.cutoff = 10)
celltypes$celltype
as.numeric(celltypes$celltype)
celltypes$celltype
as.numeric(factor(celltypes$celltype))
levels(factor(celltypes$celltype))
devtools::document()
devtools::document()
estimate_dispersion(dataset.counts, dataset.saver$estimate, celltypes$celltype, ages$age, model = 'cCV', ncores = 4, cell.types.cutoff = 10)
devtools::document()
estimate_dispersion(dataset.counts, dataset.saver$estimate, celltypes$celltype, ages$age, model = 'cCV', ncores = 4, cell.types.cutoff = 10)
devtools::document()
estimate_dispersion(dataset.counts, dataset.saver$estimate, celltypes$celltype, ages$age, model = 'cCV', ncores = 4, cell.types.cutoff = 10)
devtools::document()
estimate_dispersion(dataset.counts, dataset.saver$estimate, celltypes$celltype, ages$age, model = 'cCV', ncores = 4, cell.types.cutoff = 10)
devtools::document()
estimate_dispersion(dataset.counts, dataset.saver$estimate, celltypes$celltype, ages$age, model = 'cCV', ncores = 4, cell.types.cutoff = 10)
counts <- dataset.counts
gc()
manifold <- dataset.saver$estimate
cell.types <- celltypes$celltype
ages <- ages$age
message("Preprocessing the count matrix")
message("The initial matrix size is ",nrow(counts)," genes and ",ncol(counts)," cells.")
counts <- counts[rowSums(counts) != 0,]
message("After removing genes with zero counts, the new matrix size is ",
nrow(counts)," genes and ",ncol(counts)," cells.")
message("Calculating normalization factors")
size.factor <- colSums(counts) / mean(colSums(counts))
cell.types <- factor(cell.types)
ages <- factor(ages)
cell.types.levels <- levels(cell.types)
ages.levels <- levels(ages)
cell.types.nums <- as.numeric(cell.types)
ages.nums <- as.numeric(ages)
# Estimate dispersion parameters
dispersion.list <- list()
for(i in 1:max(cell.types.nums)) {
for (j in 1:max(ages.nums)) {
message("Estimating dispersion parameters for ", ages.levels[j], " ", cell.types.levels[i])
index <- rep(0, ncol(counts))
for (k in 1:ncol(counts)) {
index[k] <- cell.types.nums[k] == i && ages.nums[k] == j
}
if (sum(index) >= cell.types.cutoff) {
# Subset counts and normalize to match original manifold fitting
celltype.counts.age.norm <- sweep(counts[, index == 1], 2, size.factor[index == 1], "/")
# Subset the manifold
celltype.mu.age <- manifold[, index == 1]
# Run SAVER-D on the cell type and age specific subset
celltype.saver.age <- SAVER::saver(celltype.counts.age.norm, mu = celltype.mu.age, ncores = ncores)
# assign(paste0("data.size",j), sum(index))
if (model == 'cCV') {
assign(paste0("data.disp",j), celltype.saver.age$a)
} else if (model == 'cFF') {
assign(paste0("data.disp",j), celltype.saver.age$b)
} else if (model =='cVar') {
assign(paste0("data.disp",j), 1 / celltype.saver.age$k)
} else {
assign(paste0("data.disp",j), vector())
}
} else {
message("Skipped due to low cell counts")
assign(paste0("data.disp",j), vector())
}
}
# Put together cell type specific dispersion tables
celltype.disp <- data.frame('gene'= rownames(counts))
for (j in 1:max(ages.nums)) {
assign(disp.to.be.added, paste0("data.disp",j))
celltype.disp[ages.levels[j]] <- disp.to.be.added
}
dispersion.list[[cell.types.levels[i]]] <- celltype.disp
}
cell.types <- factor(cell.types)
ages <- factor(ages)
cell.types.levels <- levels(cell.types)
ages.levels <- levels(ages)
cell.types.nums <- as.numeric(cell.types)
ages.nums <- as.numeric(ages)
# Estimate dispersion parameters
dispersion.list <- list()
for(i in 1:max(cell.types.nums)) {
for (j in 1:max(ages.nums)) {
message("Estimating dispersion parameters for ", ages.levels[j], " ", cell.types.levels[i])
index <- rep(0, ncol(counts))
for (k in 1:ncol(counts)) {
index[k] <- cell.types.nums[k] == i && ages.nums[k] == j
}
if (sum(index) >= 10) {
# Subset counts and normalize to match original manifold fitting
celltype.counts.age.norm <- sweep(counts[, index == 1], 2, size.factor[index == 1], "/")
# Subset the manifold
celltype.mu.age <- manifold[, index == 1]
# Run SAVER-D on the cell type and age specific subset
celltype.saver.age <- SAVER::saver(celltype.counts.age.norm, mu = celltype.mu.age, ncores = ncores)
# assign(paste0("data.size",j), sum(index))
if (model == 'cCV') {
assign(paste0("data.disp",j), celltype.saver.age$a)
} else if (model == 'cFF') {
assign(paste0("data.disp",j), celltype.saver.age$b)
} else if (model =='cVar') {
assign(paste0("data.disp",j), 1 / celltype.saver.age$k)
} else {
assign(paste0("data.disp",j), vector())
}
} else {
message("Skipped due to low cell counts")
assign(paste0("data.disp",j), vector())
}
}
# Put together cell type specific dispersion tables
celltype.disp <- data.frame('gene'= rownames(counts))
for (j in 1:max(ages.nums)) {
assign(disp.to.be.added, paste0("data.disp",j))
celltype.disp[ages.levels[j]] <- disp.to.be.added
}
dispersion.list[[cell.types.levels[i]]] <- celltype.disp
}
cell.types <- factor(cell.types)
ages <- factor(ages)
cell.types.levels <- levels(cell.types)
ages.levels <- levels(ages)
cell.types.nums <- as.numeric(cell.types)
ages.nums <- as.numeric(ages)
# Estimate dispersion parameters
dispersion.list <- list()
for(i in 1:max(cell.types.nums)) {
for (j in 1:max(ages.nums)) {
message("Estimating dispersion parameters for ", ages.levels[j], " ", cell.types.levels[i])
index <- rep(0, ncol(counts))
for (k in 1:ncol(counts)) {
index[k] <- cell.types.nums[k] == i && ages.nums[k] == j
}
if (sum(index) >= 10) {
# Subset counts and normalize to match original manifold fitting
celltype.counts.age.norm <- sweep(counts[, index == 1], 2, size.factor[index == 1], "/")
# Subset the manifold
celltype.mu.age <- manifold[, index == 1]
# Run SAVER-D on the cell type and age specific subset
celltype.saver.age <- SAVER::saver(celltype.counts.age.norm, mu = celltype.mu.age, ncores = 2)
# assign(paste0("data.size",j), sum(index))
if (model == 'cCV') {
assign(paste0("data.disp",j), celltype.saver.age$a)
} else if (model == 'cFF') {
assign(paste0("data.disp",j), celltype.saver.age$b)
} else if (model =='cVar') {
assign(paste0("data.disp",j), 1 / celltype.saver.age$k)
} else {
assign(paste0("data.disp",j), vector())
}
} else {
message("Skipped due to low cell counts")
assign(paste0("data.disp",j), vector())
}
}
# Put together cell type specific dispersion tables
celltype.disp <- data.frame('gene'= rownames(counts))
for (j in 1:max(ages.nums)) {
assign(disp.to.be.added, paste0("data.disp",j))
celltype.disp[ages.levels[j]] <- disp.to.be.added
}
dispersion.list[[cell.types.levels[i]]] <- celltype.disp
}
model='cCV'
cell.types <- factor(cell.types)
ages <- factor(ages)
cell.types.levels <- levels(cell.types)
ages.levels <- levels(ages)
cell.types.nums <- as.numeric(cell.types)
ages.nums <- as.numeric(ages)
# Estimate dispersion parameters
dispersion.list <- list()
for(i in 1:max(cell.types.nums)) {
for (j in 1:max(ages.nums)) {
message("Estimating dispersion parameters for ", ages.levels[j], " ", cell.types.levels[i])
index <- rep(0, ncol(counts))
for (k in 1:ncol(counts)) {
index[k] <- cell.types.nums[k] == i && ages.nums[k] == j
}
if (sum(index) >= 10) {
# Subset counts and normalize to match original manifold fitting
celltype.counts.age.norm <- sweep(counts[, index == 1], 2, size.factor[index == 1], "/")
# Subset the manifold
celltype.mu.age <- manifold[, index == 1]
# Run SAVER-D on the cell type and age specific subset
celltype.saver.age <- SAVER::saver(celltype.counts.age.norm, mu = celltype.mu.age, ncores = 2)
# assign(paste0("data.size",j), sum(index))
if (model == 'cCV') {
assign(paste0("data.disp",j), celltype.saver.age$a)
} else if (model == 'cFF') {
assign(paste0("data.disp",j), celltype.saver.age$b)
} else if (model =='cVar') {
assign(paste0("data.disp",j), 1 / celltype.saver.age$k)
} else {
assign(paste0("data.disp",j), vector())
}
} else {
message("Skipped due to low cell counts")
assign(paste0("data.disp",j), vector())
}
}
# Put together cell type specific dispersion tables
celltype.disp <- data.frame('gene'= rownames(counts))
for (j in 1:max(ages.nums)) {
assign(disp.to.be.added, paste0("data.disp",j))
celltype.disp[ages.levels[j]] <- disp.to.be.added
}
dispersion.list[[cell.types.levels[i]]] <- celltype.disp
}
assign(disp.to.be.added, paste0("data.disp",1))
assign(disp.to.be.added, paste0("data.disp",4))
assign(disp.to.be.added, 4)
assign(paste0(disp.to.be.added), paste0("data.disp",4))
assign(paste0(disp.to), paste0("data.disp",4))
assign(paste0(disp.to.be.added), 4)
paste0("data.disp",j)
get(paste0("data.disp",j))
is.empty(get(paste0("data.disp",j)))
is.null(get(paste0("data.disp",j)))
length(get(paste0("data.disp",j)))
celltype.disp <- data.frame('gene'= rownames(counts))
for (j in 1:max(ages.nums)) {
if (length(get(paste0("data.disp",j))) > 0) {
celltype.disp[ages.levels[j]] <- get(paste0("data.disp",j))
}
}
dispersion.list[[cell.types.levels[i]]] <- celltype.disp
View(dispersion.list)
dispersion.list
devtools::document()
gc()
estimate_dispersion(dataset.counts, dataset.saver$estimate, celltypes$celltype, ages$age, model = 'cCV', ncores = 4, cell.types.cutoff = 10)
gc()
rm(ages)
ages <- data.frame(index=dataset.age)
age_map <- data.frame(index=c(1:length(dataset.age.levels)),age = dataset.age.levels)
celltypes <- data.frame(index=dataset.celltype)
celltype_map <- data.frame(index=c(1:length(dataset.celltype.levels)),
celltype = dataset.celltype.levels)
ages <- join(ages, age_map)
celltypes <- join(celltypes, celltype_map)
estimate_dispersion(dataset.counts, dataset.saver$estimate, celltypes$celltype, ages$age,
model = 'cCV', ncores = 4, cell.types.cutoff = 10)
gc()
install.packages("styler")
devtools::document()
styler::style_pkg()
styler::style_pkg()
devtools::document()
load("./data/TMS_marrow.RData")
compute_manifold(dataset.counts, method = "neighbor")
devtools::document()
devtools::document()
styler::style_pkg()
usethis::use_mit_license()
usethis::use_version()
usethis::use_version()
devtools::check()
devtools::check()
pkgbuild::check_build_tools(debug = TRUE)
usethis::use_tidy_github_actions()
devtools::check()
library(Rtools)
devtools::load_all()
devtools::check()
devtools::load_all()
options(buildtools.check = function(action) TRUE )
The following package(s) are missing their DESCRIPTION files:
renv::status()
library(TabulaMurisSenisData)
tms_marrow <- TabulaMurisSenisDroplet(tissues = "Marrow")
tms_marrow_counts <- tms_marrow$Marrow@assays@data$counts
rownames(tms_marrow_counts) <- rownames(tms_marrow$Marrow)
colnames(tms_marrow_counts) <- colnames(tms_marrow$Marrow)
tms_marrow_counts <- as(tms_marrow_counts, "dgCMatrix")
tms_marrow_ages <- which(tms_marrow$Marrow$age %in% c("3m", "30m"))
tms_marrow_cell_types <- which(tms_marrow$Marrow$cell_ontology_class %in% c('erythroid progenitor', 'granulocytopoietic cell',
'hematopoietic precursor cell', 'megakaryocyte-erythroid progenitor cell', 'precursor B cell'))
tms_marrow_counts <- tms_marrow_counts[, intersect(tms_marrow_ages, tms_marrow_cell_types)]
View(tms_marrow_counts)
tms_marrow_manifold_neighbor <- compute_manifold(tms_marrow_counts, method = "neighbor")
renv::init()
library(TabulaMurisSenisData)
tms_marrow <- TabulaMurisSenisDroplet(tissues = "Marrow")
tms_marrow_counts <- tms_marrow$Marrow@assays@data$counts
rownames(tms_marrow_counts) <- rownames(tms_marrow$Marrow)
colnames(tms_marrow_counts) <- colnames(tms_marrow$Marrow)
tms_marrow_counts <- as(tms_marrow_counts, "dgCMatrix")
tms_marrow_ages <- which(tms_marrow$Marrow$age %in% c("3m", "30m"))
tms_marrow_cell_types <- which(tms_marrow$Marrow$cell_ontology_class %in% c('erythroid progenitor', 'granulocytopoietic cell',
'hematopoietic precursor cell', 'megakaryocyte-erythroid progenitor cell', 'precursor B cell'))
tms_marrow_counts <- tms_marrow_counts[, intersect(tms_marrow_ages, tms_marrow_cell_types)]
tms_marrow_manifold_neighbor <- compute_manifold(tms_marrow_counts, method = "neighbor")
devtools::document()
tms_marrow_manifold_neighbor <- compute_manifold(tms_marrow_counts, method = "neighbor")
devtools::document()
tms_marrow_manifold_neighbor <- compute_manifold(tms_marrow_counts, method = "neighbor")
tms_marrow$Marrow$cell_ontology_class
tms_marrow$Marrow$age[which(tms_marrow$Marrow$age %in% c("3m", "30m"))]
tms_marrow$Marrow$age[intersect(tms_marrow_ages, tms_marrow_cell_types)]
estimate_dispersion(tms_marrow_counts, tms_marrow_manifold_neighbor,
tms_marrow$Marrow$cell_ontology_class[intersect(tms_marrow_ages, tms_marrow_cell_types)],
tms_marrow$Marrow$age[intersect(tms_marrow_ages, tms_marrow_cell_types)],
model = "cCV", ncores = 4, cell.types.cutoff = 10)
devtools::document()
estimate_dispersion(tms_marrow_counts, tms_marrow_manifold_neighbor,
tms_marrow$Marrow$cell_ontology_class[intersect(tms_marrow_ages, tms_marrow_cell_types)],
tms_marrow$Marrow$age[intersect(tms_marrow_ages, tms_marrow_cell_types)],
model = "cCV", ncores = 4, cell.types.cutoff = 10)
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
save(tms_marrow, 'S:/Dropbox (Penn)/Aging/Intrinomap/data/tms_marrow.RData')
save(tms_marrow, file = 'S:/Dropbox (Penn)/Aging/Intrinomap/data/tms_marrow.RData')
devtools::check()
devtools::document()
devtools::check()
setwd("S:/Dropbox (Penn)/Aging/Intrinomap")
tools::resaveRdaFiles
save(tms_marrow, file = 'S:/Dropbox (Penn)/Aging/Intrinomap/data/tms_marrow.RData', compress='xz')
devtools::document()
tables(tms_marrow$Marrow$cell_ontology_class[intersect(tms_marrow_ages, tms_marrow_cell_types))
tables(tms_marrow$Marrow$cell_ontology_class[intersect(tms_marrow_ages, tms_marrow_cell_types)])
table(tms_marrow$Marrow$cell_ontology_class[intersect(tms_marrow_ages, tms_marrow_cell_types)])
save(tms_marrow, './data/tms_marrow.rda')
save(tms_marrow, file='./data/tms_marrow.rda', compress = 'xz')
file.create("R/data.R")
devtools::document()
data("tms_marrow")
tms_marrow_counts <- tms_marrow$Marrow@assays@data$counts
devtools::document()
devtools::document()
devtools::document()
devtools::document()
install.packages('TabulaMurisSenisData')
devtools::check()
devtools::check()
install.packages('TabulaMurisSenisData')
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
renv::status()
devtools::document()
library(devtools)
install.packages('devtools')
install.packages('devtools')
library(devtools)
devtools::document()
devtools::document()
renv::status()
renv::init()
renv::snapshot()
renv::init()
renv::update()
renv::snapshot()
devtools::document()
devtools::check()
devtools::build()
devtools::check()
devtools::check()
gc()
